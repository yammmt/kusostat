name: Rust

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2.3.5
    - name: Install postgres (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev postgresql
        echo "host    all             all             127.0.0.1/32            md5" > sudo tee -a /etc/postgresql/10/main/pg_hba.conf
        sudo service postgresql restart && sleep 3
        sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'root';"
        sudo service postgresql restart && sleep 3
    - name: Install postgres (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        choco install postgresql13 --force --params '/Password:root'
        echo "C:\Program Files\PostgreSQL\13\bin" >> $GITHUB_PATH
        echo "C:\Program Files\PostgreSQL\13\lib" >> $GITHUB_PATH
        echo "PQ_LIB_DIR=C:\Program Files\PostgreSQL\13\lib" >> $GITHUB_ENV
    - name: Install postgres (MacOS)
      if: runner.os == 'macOS'
      run: |
        /usr/local/opt/postgres/bin/pg_ctl -D /usr/local/var/postgres start
        sleep 3
        /usr/local/opt/postgres/bin/createuser -s postgres
    - name: Build
      run: |
        cargo install diesel_cli --no-default-features --features "postgres"
        diesel setup --database-url "postgres://postgres:root@localhost/kusostat"
        echo "DATABASE_URL=postgres://postgres:root@localhost/kusostat" > .env
        cargo build --verbose
    - name: Run tests
      run: |
        cargo install diesel_cli --no-default-features --features "postgres"
        diesel setup --database-url "postgres://postgres:root@localhost/kusostat_test"
        echo "DATABASE_URL=postgres://postgres:root@localhost/kusostat" > .env
        cargo test --verbose

  clippy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.5
    - uses: actions-rs/clippy-check@v1
      with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  rustfmt:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.5
    - name: Run rustfmt
      run: cargo fmt -- --check
